buildscript {
    ext {
        jooqVersion = "3.19.5"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '9.0'
}

group = 'com.aaron'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: "org.jooq:jooq"
    }
    implementation("org.jooq:jooq:$jooqVersion")
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    jooqGenerator(project(":jOOQ-custom"))
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
String dbUser = System.properties["db-user"] ?: "root"
String dbPasswd = System.properties["db-passwd"] ?: "passwd"

jooq {
    version = "${jooqVersion}"

    configurations {
        sakilaDb {
            generationTool {
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = 'jdbc:mysql://localhost:3306'
                    user = "${dbUser}"
                    password = "${dbPasswd}"
                }

                generator {
                    name = "org.jooq.codegen.KotlinGenerator"

                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        unsignedTypes = true

                        schemata {
                            schema {
                                inputSchema = 'sakila'
                            }
                        }

                        forcedTypes {
                            forcedType {
                                userType = 'java.lang.Long'
                                includeTypes = 'int unsigned'
                            }

                            forcedType {
                                userType = 'java.lang.Integer'
                                includeTypes = 'tinyint unsigned'
                            }

                            forcedType {
                                userType = 'java.lang.Integer'
                                includeTypes = 'smallint unsigned'
                            }
                        }
                    }

                    generate {
                        daos = true
                        records = true
                        fluentSetters = true
                        javaTimeTypes = true
                        deprecated = false

//                        jpaAnnotation = true
//                        jpaVersion = 2.2
//                        validationAnnotations = true
//                        springAnnotations = true
//                        springDao = true
                    }

                    target {
                        directory = 'src/generated'
                    }

                    strategy.name = "jooq.custom.generator.JPrefixGeneratorStrategy"
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/generated"]
        }
    }
}